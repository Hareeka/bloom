"use client";

import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { BookOpen, Smile, HeartPulse, Book } from "lucide-react";
import { Slider } from "@/components/ui/slider";
import { Label } from "@/components/ui/label";
import { useUser, useFirestore, addDocumentNonBlocking } from "@/firebase";
import { collection, Timestamp } from "firebase/firestore";
import { useToast } from "@/hooks/use-toast";
import { useRouter } from "next/navigation";

export default function JournalPage() {
    const [content, setContent] = useState("");
    const [academicsScore, setAcademicsScore] = useState(50);
    const [healthScore, setHealthScore] = useState(50);
    const [happinessScore, setHappinessScore] = useState(50);
    const { user } = useUser();
    const firestore = useFirestore();
    const { toast } = useToast();
    const router = useRouter();

    const handleSaveEntry = () => {
        if (!user || !firestore) {
            toast({
                title: "Error",
                description: "You must be logged in to save an entry.",
                variant: "destructive",
            });
            return;
        }

        if (!content.trim()) {
            toast({
                title: "Entry is empty",
                description: "Please write something before saving.",
                variant: "destructive",
            });
            return;
        }
        
        const journalCollectionRef = collection(firestore, `students/${user.uid}/journal_entries`);

        addDocumentNonBlocking(journalCollectionRef, {
            studentId: user.uid,
            date: Timestamp.now(),
            content: content,
            academicsScore: academicsScore,
            healthScore: healthScore,
            happinessScore: happinessScore,
            // id is auto-generated by firestore
        });

        toast({
            title: "Journal Entry Saved!",
            description: "Your reflections have been recorded.",
        });

        // Optionally, redirect or clear the form
        router.push('/dashboard');
    };

  return (
    <div className="container mx-auto py-8">
      <Card className="max-w-4xl mx-auto">
        <CardHeader className="text-center">
          <div className="mx-auto bg-primary/10 p-4 rounded-full w-fit mb-4">
              <BookOpen className="h-10 w-10 text-primary" />
          </div>
          <CardTitle className="font-headline text-3xl">My Daily Journal</CardTitle>
          <CardDescription>
            Reflect on your day, track your experiences, and nurture your growth.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-8">
           <Textarea 
             placeholder="How was your day? What did you learn? What challenges did you face?" 
             className="min-h-[200px] text-base"
             value={content}
             onChange={(e) => setContent(e.target.value)}
           />

            <div className="space-y-6">
                <div className="space-y-3">
                    <Label className="flex items-center gap-2 text-base"><Book className="h-5 w-5 text-chart-1"/>Academics Score: {academicsScore}%</Label>
                    <Slider defaultValue={[academicsScore]} max={100} step={1} onValueChange={(value) => setAcademicsScore(value[0])} />
                </div>
                 <div className="space-y-3">
                    <Label className="flex items-center gap-2 text-base"><HeartPulse className="h-5 w-5 text-chart-2"/>Health Score: {healthScore}%</Label>
                    <Slider defaultValue={[healthScore]} max={100} step={1} onValueChange={(value) => setHealthScore(value[0])} />
                </div>
                 <div className="space-y-3">
                    <Label className="flex items-center gap-2 text-base"><Smile className="h-5 w-5 text-chart-3"/>Happiness Score: {happinessScore}%</Label>
                    <Slider defaultValue={[happinessScore]} max={100} step={1} onValueChange={(value) => setHappinessScore(value[0])} />
                </div>
            </div>

           <Button className="w-full" size="lg" onClick={handleSaveEntry}>Save Entry</Button>
        </CardContent>
      </Card>
    </div>
  );
}
